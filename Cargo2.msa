	p68h11
	public	cargon
	extern	btasci	
$const.def	
****************************************************************************************************************
* CARGON
*	
* Parametros recibidos: 
*   Por IX: Origen de la cadena que contiene los operandos.
*   Por IY Ubicación del caracter a cargar. 
*   Por Stack: Dirección del contador de digitos. (mandar primero)
*   Por Stack: Dirección de la memorias a mostrar por display. (mandar despues)
*   
* Parametros entregados: Ninguno
****************************************************************************************************************
	rseg	CODE

cargon	equ *
	psha
	pshb
	pshx
	pshy
	
	clr	negat
	tsx			
	ldx	10,x	; Apunto IX a la memoria que cuenta los digitos
	ldaa	0,x	; Cargo el contador de digitos
	cmpa 	#3    
	blo	cargo  ; Si ya tenía 3 digitos no sigo cargando
	jmp	fcargon
	
cargo	tsx
	ldx	2,x	; Apunto IX al bye de negatividad del operando
	ldaa	0,x	; Cargo el byte de negatividad
	bne	nego	; Si el numero es negativo, salto
	
	ldd	1,x     ; Cargo en AccB el valor a sumar
	ldaa	#10     ; Cargo para multiplicar por 10
	mul
	jmp	saltoC1


nego	inc	negat
	ldy	#10
	ldd	1,x       ; Cargo en IY el valor que ya tenía
	coma
	comb
	addd	#1
	std	mem
	clra
	clrb
multi	addd	mem
	dey
	bne	multi
	
saltoC1	tsx	
	ldy	0,x	; Apunto IY a la dir donde esta el nuevo caracter
	xgdx		; Paso la multiplicacion que tenia en Accd a IX
	ldab	0,y	; Cargo el nuevo caracter
	abx		; Sumo el nuevo caracter
	xgdx		; Paso el nuevo numero a Accd
	tst	negat
	beq	apunto
	coma
	comb
	addd	#1

apunto	tsx
	ldx	2,x	; Cargo la dir del indicador de negatividad del operando
	std	1,x	; Guardo el numero en el operando pedido
	
	tsx		
	ldx	10,x	; Apunto IX al contador de digitos
	inc	0,x 	; Incremento el contador de digitos
	
	tsx	
	ldy	8,x	; Cargo en IY la dir de memoria de mdis
	ldx	2,x	; Cargo en IX el numero a mostrar
	inx
	jsr	btasci	; Voy a la subrutina que convierte y muestra el numero

fcargon puly
	pulx
	pulb
	pula
	rts

****************************************************************************************************************

****************************************************************************************************************
	rseg	VARS
mem	rmb	2
negat	rmb	1
	END
