	p68h11
	public	calculo
$const.def
****************************************************************************************************************
* CALCULO
*	Si se pulso F ('=') en el teclado llama a esta subrutina que se encarga de ver cuales son los operandos 
*	y la operación y realizarla.
* Parametros recibidos: 
* 	Dirección del primer operando por IX 
* 	Inicio de result por IY
* Parametros entregados: Resultado de la opeación en la variable en la memoria definida como result
****************************************************************************************************************
	rseg	CODE
calculo	equ	*
	psha
	pshb
	pshx
	pshy		;programación defensiva
	
	ldaa	#$2A	;comparo con el caracter de multiplicación en ASCII
	cmpa	2,x
	beq	mula
	inca		;comparo con los caracteres de suma en ASCII
	cmpa	2,X	
	beq	suma
	inca		;comparo con los caracteres de resta en ASCII
	inca
	cmpa	2,X	
	beq	resta	;si no es ninguno de los anteriores tiene que dividir 
****************************************************************************************************************	
diva	equ	*
	ldd	0,x
	ldx	4,x	;4,x es el segundo operando en variables
	bne	divido	;si el divisor es 0 que resulte en un error
	jmp	errcal
	
divido	jsr	Division
	std	0,y
	clc
	jmp	fin
	
****************************************************************************************************************	
resta	equ	*
	ldd	0,x
	subd	4,x	;4,x es el segundo operando en variables
	cpd	#MIN	;comparo con el máximo valor de 3 digitos
	bmi	errcal
	cpd	#MAX	;comparo con el máximo valor de 4 digitos
	bpl	errcal
	std	0,y
	clc		;indico que la cuenta esta bien
	jmp	fin

****************************************************************************************************************
suma	equ	*
	ldd	0,x
	addd	4,x	;4,x es el segundo operando en variables
	cpd	#MAX	;comparo con el máximo valor de 4 digitos
	bpl	errcal
	cpd	#MIN	;comparo con el máximo valor de 3 digitos
	bmi	errcal
	std	0,y
	clc		;indico que la cuenta esta bien
	jmp	fin
	
****************************************************************************************************************	
mula	equ	*
	pshx		; Paso por stack la dirección del primer factor
	ldd	0,x	; Cargo en AccD el primer factor
	ldx	4,x	; Cargo en IX el segundo factor
	jsr	multi
	pulx
	bcs	fin	; Si no hay error, no guardo el resultado.
	std	0,y	;Guardo el resultado donde me indicaron
	jmp	fin
	
errcal	sec		;indico por el carry (=1) que hay un error en la cuenta
fin	puly		;programación defensiva
	pulx
	pula	
	pulb
	rts
**********************************************************************************************
**********************************************************************************************

**********************************************************************************************
*MULTI
* Teniendo ambos factores en registros y y recibiendo la dirección del primer factor, calcula
*la multiplicación entre ellos, indicando error en caso de que sea necesario.
*  Parametros recibidos: 
*	Factor 1 por Accd
*	Factor 2 por IX
*	Dirección primer factor por stack
*  Parametros entregados: 
*	Resultado en AccD
**********************************************************************************************
multi	equ	*
	pshy
	
	clr	mulneg	; Limpio la variable que guarda la cant de factores negativos
	tsy	
	ldy	4,y	; Cargo IY como un contador con las veces a sumar el primer factor
	
	tsta		; Actualizamos el CCR en funcion del primer factor
	bge	mulpos1	; Solo si no es negativo, saltamos directo al analisis del divisor
	inc	mulneg	; Incremento el contador de numeros negativos
	coma		; Comienzo realizando un complemento a 2 de forma semimanual, para ello:
	comb		;complemento a 1 Acca y Accb por separado  
	addd	#1	; Sumo uno a AccD
	std	0,y	; Guardo el primer factor como positivo
	
mulpos1	xgdx		; Analizamos el segundo factor
	tsta		; Actualizamos el CCR en funcion del primer factor
	bge	mulpos2	; Solo si no es negativo, saltamos directo a la multiplicación
	inc	mulneg	; Incremento el contador de numeros negativos
	coma		; Comienzo realizando un complemento a 2 de forma semimanual, para ello:
	comb		;complemento a 1 Acca y Accb por separado  
	addd	#1	; Sumo uno a AccD
	
	
mulpos2	xgdx		; Devuelvo el segundo factor a IX
	ldd	#0	
multn	addd	0,y	;la primera vez se carga el número, las demas suma sucesivamente (Producto de números)
	cpd	#MAX	;comparo con el máximo valor de 4 digitos
	bhs	errcalm	; Si es mayor, salto a error
	dex		;decrementamos el segundo operando para saber cuantas veces sumamos AccD
	bne	multn	;si el contador no es cero, sigo multiplicando	
	
	
	tst	mulneg	
	beq	finmul	; Si no había numeros negativos
	lsr	mulneg	;o ambos eran negativos	no complementamos
	lsr	mulneg	;el cociente obtenido.
	bcs	finmul
        
	coma		; Una vez realizada la multiplicación hago el mismo proceso que hice al 
	comb		;principio pero ahora para obtener resultado de forma signada.
	addd	#1	; Sumo uno a AccD
	cpd	#MIN	; Comparo con el valor mínimo
	ble	errcalm	; Si el resultado es menor al mínimo, voy a error 
	jmp	finmul

errcalm	sec		; Aviso que hay error
	jmp	failmul

finmul	clc		; Aviso el exito de la multiplicación
failmul	puly
	rts		; Retorno a la subrutina sin haber modificado ningún registro no deseado
	
**********************************************************************************************
**********************************************************************************************	


**********************************************************************************************
*DIVISION
*Esta función recibe por indice D el numero signado a dividir y lo divide por el 
*numero que se encuentre en IX. El cociente se entrega en AccD 
*Parametros recibidos: 
*	Dividendo por AccD
*	Divisor por IX.
*Parametros entregados: cociente en AccD, resto por IX.
**********************************************************************************************
Division	equ	*
	pshy
	
	ldy	#0	; Borramos IY para usarlo como contador
	tsta		; Actualizamos el CCR en funcion del dividendo
	bge	nocom1	; Solo si no es negativo, saltamos directo al analisis del divisor
	iny		; Incremento el contador de numeros negativos
	coma		; Comienzo realizando un complemento a 2 de forma semimanual, para ello:
	comb		;complemento a 1 Acca y Accb por separado  
	addd	#1	; Sumo uno a AccD
	
nocom1	xgdx		; Analizamos el divisor
	tsta
	bge	nocom2	; Solo si no es negativo, saltamos directo a la división
	iny		; Incremento el contador de numeros negativos
	coma		; Comienzo realizando un complemento a 2 de forma semimanual, para ello:
	comb		;complemento a 1 Acca y Accb por separado  
	addd	#1	; Sumo uno a AccD
	
	
nocom2	xgdx		; Devuelvo de divisor a IX
	idiv		; Divido el resultado de la suma por la cant de elementos que sume.
	xgdx		; Transfiero el cociente de IX a Accd.
	
	xgdy
	tstb
	beq	nocomd	; Si no había numeros negativos
	lsrb		;o ambos eran negativos	no complementamos
	lsrb		;el cociente obtenido.
	bcs	nocomd
        
	xgdy
	coma		; Una vez realizada la división hago el mismo proceso que hice al 
	comb		;principio pero ahora para obtener resultado de forma signada.
	addd	#1	; Sumo uno a AccD
	jmp	find

nocomd	xgdy
find	puly
	rts		; Retorno a la subrutina sin haber modificado ningún registro no deseado
	
**********************************************************************************************
**********************************************************************************************	
	rseg	VARS
mulneg	rmb	1
	END
