	p68h11
	public	calculo,error
	extern	keypad,init,display,delay
$const.def
****************************************************************************************************************
* CALCULO
*	Si se pulso F ('=') en el teclado llama a esta subrutina que se encarga de ver cuales son los operandos 
*	y la operación y realizarla.
* Parametros recibidos: 
* Inicio de número Binary por IX 
* Inicio de result por IY
* Parametros entregados: Resultado de la opeación en la variable en la memoria definida como result
****************************************************************************************************************
	rseg	CODE
calculo	equ	*
	psha
	pshb
	pshx
	pshy		;programación defensiva
	
	ldaa	#$2A	;comparo con el caracter de multiplicación en ASCII
	cmpa	2,x
	beq	mula
	inca		;comparo con los caracteres de suma en ASCII
	cmpa	2,X	
	beq	suma
	inca		;comparo con los caracteres de resta en ASCII
	inca
	cmpa	2,X	
	beq	resta	;si no es ninguno de los anteriores tiene que dividir 
****************************************************************************************************************	
diva	equ	*
	ldd	0,x
	ldx	4,x	;4,x es el segundo operando en variables
	bne	divido	;si el divisor es 0 que resulte en un error
	jmp	errcal
	
divido	jsr	Division
	std	0,y
	clc
	jmp	fin
	
****************************************************************************************************************	
resta	equ	*
	ldd	0,x
	subd	4,x	;4,x es el segundo operando en variables
	cpd	#MIN	;comparo con el máximo valor de 3 digitos
	bmi	errcal
	cpd	#MAX	;comparo con el máximo valor de 4 digitos
	bpl	errcal
	std	0,y
	clc		;indico que la cuenta esta bien
	jmp	fin

****************************************************************************************************************
suma	equ	*
	ldd	0,x
	addd	4,x	;4,x es el segundo operando en variables
	cpd	#MAX	;comparo con el máximo valor de 4 digitos
	bpl	errcal
	cpd	#MIN	;comparo con el máximo valor de 3 digitos
	bmi	errcal
	std	0,y
	clc		;indico que la cuenta esta bien
	jmp	fin
	
****************************************************************************************************************	
mula	equ	*
	pshy		;guardamos IX para no perder la dirección donde se guarda el resultado
	ldd	#0
	ldy	4,x	;cargamos el segundo operando y si es cero que cargue cero en el resulatdo
	beq	cero
mult	addd	0,x	;la primera vez se carga el número, las demas suma sucesivamente (Producto de números)
	dey		;decrementamos el segundo operando para saber cuantas veces sumamos AccD
	bne	mult		
cero	puly
	std	0,y
	cpd	#MAX	;comparo con el máximo valor de 4 digitos
	bpl	errcal
	cpd	#MIN	;comparo con el máximo valor de 3 digitos
	bmi	errcal
	clc		;indico que la cuenta esta bien
	jmp	fin
****************************************************************************************************************	

errcal	sec		;indico por el carry (=1) que hay un error en la cuenta
fin	puly		;programación defensiva
	pulx
	pula	
	pulb
	rts

**********************************************************************************************
*ERROR
* Pone una "E" en el display y "congela" la calculadora hasta que se aprete clear y se borren
*todas las memorias.
*Parametros recibidos:
*	Primer dirección del arreglo numerico por IX
*	Origen del arreglo del teclado por IY
*	Cant memorias a borrar por AccB
*	Memorias que se muestran en el display por stack
*Parametros entregados: Ninguno
**********************************************************************************************
error	equ	*
	psha		; Programación defensiva
	pshb
	pshx
	pshy
	
	tsx		; Creo un framepointer
	ldx	8,x	; Cargo en IX la dir de  mdis
	ldaa	#$45	; Cargo "E" en la primer memoria del display
	staa	0,x	
	ldab	#3
	inx
erase	clr	0,x	; Borro los tres ultimos digitos del display
	inx
	decb
	bne	erase
	
	tsx		; Creo un framepointer
	ldx	8,x	; Cargo en IX la dir de  mdis
	jsr	display	; Refresco el display
	
waitclr	tsx
	ldy	0,x	; Si entre en error, lo mantengo en el bucle
	jsr	keypad	;hasta que se aprete clear y se borren todas 
	ldaa	0,y	;las memorias
	cmpa	#$43
	bne	waitclr
	
	tsx		; Creo un framepointer
	ldaa	4,x	; Cargo en Acca la cant de memorias a borrar
	ldx	2,x	; Cargo la dirección del inicio del arreglo numerico en IX
	jsr	init	; Borro memorias
	
	ldaa	#$30	; Cargo "0" en Acca
	tsx		; Creo un framepointer
	ldx	8,x	; Cargo en IX la dir. de mdis
	staa	3,x	; Guardo el "0" en el ult digito del display
	
	puly		; Programación defensiva
	pulx
	pulb
	pula
	rts		; Retorno a la subrutina sin haber modificado ningún registro no deseado
	
**********************************************************************************************
**********************************************************************************************	

**********************************************************************************************
*DIVISION
*Esta función recibe por indice D el numero signado a dividir y lo divide por el 
*numero que se encuentre en IX. El cociente se entrega en AccD 
*Parametros recibidos: dividendo en AccD, Divisor en IX.
*Parametros entregados: cociente en AccD, resto por IX.
**********************************************************************************************
Division	equ	*
	pshy
	
	ldy	#0	; Borramos IY para usarlo como contador
	tsta		; Actualizamos el CCR en funcion del dividendo
	bge	nocom1	; Solo si no es negativo, saltamos directo al analisis del divisor
	iny		; Incremento el contador de numeros negativos
	coma		; Comienzo realizando un complemento a 2 de forma semimanual, para ello:
	comb		;complemento a 1 Acca y Accb por separado  
	addd	#1	; Sumo uno a AccD
	
nocom1	xgdx		; Analizamos el divisor
	tsta
	bge	nocom2	; Solo si no es negativo, saltamos directo a la división
	iny		; Incremento el contador de numeros negativos
	coma		; Comienzo realizando un complemento a 2 de forma semimanual, para ello:
	comb		;complemento a 1 Acca y Accb por separado  
	addd	#1	; Sumo uno a AccD
	
	
nocom2	xgdx		; Devuelvo de divisor a IX
	idiv		; Divido el resultado de la suma por la cant de elementos que sume.
	xgdx		; Transfiero el cociente de IX a Accd.
	
	xgdy
	tstb
	beq	nocomd	; Si no había numeros negativos
	lsrb		;o ambos eran negativos	no complementamos
	lsrb		;el cociente obtenido.
	bcs	nocomd
        
	xgdy
	coma		; Una vez realizada la división hago el mismo proceso que hice al 
	comb		;principio pero ahora para obtener resultado de forma signada.
	addd	#1	; Sumo uno a AccD
	jmp	find

nocomd	xgdy
find	puly
	rts		; Retorno a la subrutina sin haber modificado ningún registro no deseado
	
**********************************************************************************************
**********************************************************************************************	
	END
