	p68h11
	public	calculo
****************************************************************************************************************
* CALCULO
*	Si se pulso F ('=') en el teclado llama a esta subrutina que se encarga de ver cuales son los operandos y 
*	 la operación y realizarla.
* Parametros recibidos: Inicio de número Binary por IX e Inicio de result por IY
* Parametros entregados: resultado de la opeación en result
****************************************************************************************************************
	rseg	CODE
calculo	equ	*
	psha
	pshb
	pshx
	pshy		;programación defensiva
	
	ldaa	#$2A	;comparo con el caracter de multiplicación en ASCII
	cmpa	2,x
	beq	mula
	inca		;comparo con los caracteres de suma en ASCII
	cmpa	2,X	
	beq	suma
	inca
	inca
	cmpa	2,X	
	beq	resta	;si no es ninguno de los anteriores tiene que restar 
****************************************************************************************************************	
diva	equ	*
	ldd	0,x
	ldx	4,x	;4,x es el segundo operando en variables
	tsx
	bne	divido
	jmp	error
	
divido	jsr	Division
	std	0,y
	clc
	jmp	fin
	
****************************************************************************************************************	
resta	equ	*
	ldd	0,x
	subd	4,x	;4,x es el segundo operando en variables
	std	0,y
	clc
	jmp	fin

****************************************************************************************************************
suma	equ	*
	ldd	0,x
	addd	4,x	;4,x es el segundo operando en variables
	std	0,y
	clc
	jmp	fin
	
****************************************************************************************************************	
mula	equ	*
	ldd	#1111	;un indicador para saber que se invoco a la multiplicación
	std	0,y	;HAY QUE HACER ESTA SUBRUTINA!!!
	clc
	jmp	fin
****************************************************************************************************************	

error	equ	*
	sec

fin	puly		;programación defensiva
	pulx
	pula	
	pulb
	rts
	
	
	
**********************************************************************************************
*DIVISION
*Esta función recibe por indice D el numero signado a dividir y lo divide por el 
*numero que se encuentre en IX. El cociente se entrega en AccD 
*Parametros recibidos: dividendo en AccD, Divisor en IX.
*Parametros entregados: cociente en AccD, resto por IX.
**********************************************************************************************
Division	equ	*
	pshy
	
	ldy	#0	; Borramos IY para usarlo como contador
	tsta		; Actualizamos el CCR en funcion del dividendo
	bge	nocom1	; Solo si no es negativo, saltamos directo al analisis del divisor
	iny		; Incremento el contador de numeros negativos
	coma		; Comienzo realizando un complemento a 2 de forma semimanual, para ello:
	comb		;complemento a 1 Acca y Accb por separado  
	addd	#1	; Sumo uno a AccD
	
nocom1	xgdx		; Analizamos el divisor
	tsta
	bge	nocom2	; Solo si no es negativo, saltamos directo a la división
	iny		; Incremento el contador de numeros negativos
	coma		; Comienzo realizando un complemento a 2 de forma semimanual, para ello:
	comb		;complemento a 1 Acca y Accb por separado  
	addd	#1	; Sumo uno a AccD
	
	
nocom2	xgdx		; Devuelvo de divisor a IX
	idiv		; Divido el resultado de la suma por la cant de elementos que sume.
	xgdx		; Transfiero el cociente de IX a Accd.
	
	xgdy
	tstb
	beq	nocomd	; Si no había numeros negativos
	lsrb		;o ambos eran negativos	no complementamos
	lsrb		;el cociente obtenido.
	xgdy
	bcs	nocomd

	coma		; Una vez realizada la división hago el mismo proceso que hice al 
	comb		;principio pero ahora para obtener resultado de forma signada.
	addd	#1	; Sumo uno a AccD
	jmp	find

nocomd	xgdy
find	puly
	rts		; Retorno a la subrutina sin haber modificado ningún registro no deseado
	
**********************************************************************************************
**********************************************************************************************
		
	END