	p68h11
	public	initdis,outchar,init,secuizq,display
$const.def
	rseg	CODE
**************************************
*Initdis: Inicializar el display
**************************************
initdis equ *
	psha
	ldaa	#$0F 	;set for output
	staa	DDRC 	;C output
	ldaa 	PIOC 	;get current value
	anda 	#$FE 	;reset bit 0 to 0
	staa 	PIOC 	;send it out
	pula
	rts

**************************************
*Outchar: 
* ACCA: Carácter a enviar
* ACCB: Posición (0-3)
**************************************
outchar equ *
	stab	PORTCL 	;set the position
	staa 	PORTB	;set the character
	rts
	
**************************************************************************
*Init: Borra N cantidad de memorias desde la dirección pedida
*	Parametros recibidos: Dirección de origen por IX, cant memorias AccA
*	Parametros entregados: Ninguno
**************************************************************************
init 	equ *
	pshx
	psha		;programación defensiva
	
borra	clr	0,x
	inx
	deca
	bne	borra
	
	pula		;programación defensiva
	pulx
	rts
	
**************************************************************************
*DISPLAY
*  Carga el contenido de las posiciones de memoria mdis0, mdis1, mdis2, mdis3
* y muesta su contenido en el display en la posicion 0, 1, 2, 3, respectivamente
*	Parametros recibidos: Inicio de string con caracteres a mostrar por IX
*	Parametros entregados: Ninguno
**************************************************************************

display	equ	*

	psha
	pshb		;programación defensiva
	
	clrb		;limpia b para poder posicionarse en el primer elemento del display
	ldaa	3,x	;carga el cuarto valor de la posición del string para ponerlo en 
	jsr	outchar	 el primer elemento del display
	incb
	ldaa	2,x	;carga el tercer valor de la posición del string para ponerlo en 
	jsr	outchar	 el segundo elemento del display
	incb
	ldaa	1,x	;carga el segundo valor de la posición del string para ponerlo en 
	jsr	outchar	 el tercer elemento del display
	incb
	ldaa	0,x	;carga el primer valor de la posición del string para ponerlo en
	jsr	outchar	 el cuarto elemento del display
	
	pulb		;programación defensiva
	pula
	rts

***************************************************************************
*SECUIZQ:
* Desplaza hacia la izquierda un lugar el contenido de todas las memorias
* Si solo se encuentra el 0 en el display y se agrega un nuevo digito, elimina
*el 0
*que despues se cargan al display y agrega el nuevo caracter
*	Param. Recibe: Caracter a por AccB, inicio del array por IX
*	Param. Entrega: Ninguno
****************************************************************************
secuizq	equ	*
	
	psha		; Guardo AccA en el stack
	
	cmpb	#$30
	bhs	secnum	; Si el caracter es un numero, hago una secuencia
	jmp	secope	; Si el caracter es un operador, hago otra secuencia

secnum	ldaa	1,x	; Desplazo los contenidos de las memorias que se cargan
	staa	0,x	;en el display un lugar a la izquierda
	ldaa	2,x
	staa	1,x
	ldaa	3,x	
	cmpa	#$30	;Si el ultimo digito es 0 
	bne	load	;y el numero no tenían cifras anteriores 
	ldaa	2,x	;sobreescribo directamente el nuevo caracter
	beq	clcero	;sin desplazar el 0
load	ldaa	3,x
	staa	2,x
clcero	ldaa	#$30
	aba
	tab
	stab	3,x	;el caracter derecho
	pula		;Recupero Acca
	rts
	
secope	ldaa	1,x	; Desplazo los contenidos de las memorias que se cargan
	staa	0,x	;en el display un lugar a la izquierda
	ldaa	2,x
	staa	1,x
	ldaa	3,x	
	staa	2,x
	stab	3,x
	pula		;Recupero Acca
	rts
	
	
****************************************************************************
****************************************************************************

	END
