****************************************************************************************************************
*						Calculadora						Grupo: 7
*	Este programa ...
****************************************************************************************************************
	p68h11		;declara el modelo de microprocesador utilizado.
	extern	initdis,outchar,keypad,init,display,cargon,calculo,delay,cargoop,btasci,error
$const.def
	rseg	CODE
	lds 	#st_ini	; Inicializo el display
	jsr	initdis
	ldx	#negop1
	ldaa	#NCLC	
	jsr	init	; Reseteo las memorias
	ldaa	#$30
	ldx	#mdis
	staa	3,x
	jsr 	display	; Refrezco el display
mloop	ldy	#I_STR
	jsr	keypad	; Reviso se presionó alguna tecla
	
	bcs	apreto	; Si se apretó algo sigo analizando
	jmp	nocarga	; Si no se apretó nada, sigo analizando hasta que se aprete algo
	
apreto	ldaa	0,y
	cmpa	#$43	; Analizo si se apretó el clear
	bne	noC	; Si no se apretó clear, sigo analizando que se apreto  
	ldx	#negop1	; Si se apretó clear, borro todas las memorias y muestro
	ldaa	#NCLC	; "0" en el display
	jsr	init
	ldaa	#$30
	ldx	#mdis
	staa	3,x
	jmp	lcarga	; Una vez terminado, vuelvo a esperar que presionen algo.
	
noC	ldaa	0,y
	cmpa	#$52	; Analizo si se apretó "R"
	bne	noR
	ldaa	oper	; Si no hay operador, ignoro que se haya apretado "R"
	bne	sigo
	jmp	nocarga
	
sigo	ldx	#op1	; Si hay operando, salto a la subrutina 
	ldy	#result	; que calcula el resultado de la cuenta.
	jsr	calculo
	bcc	noerror	; Si la subrutina, me dice que hay error,
	jmp	err	;salto al estado "error"
	
noerror	ldx	result	; Si no hay error:
	stx	op1	; Cargo el resultado en el operando 1
	ldx	#result
	ldy	#mdis	; Salto a la subrutina que me muestra
	jsr	btasci	; el resultado en el display 
	ldaa	#1	; Aviso por recur, que ya realice una
	staa	recur	;operación
	jmp	lcarga
	
noR	ldaa	0,y
	cmpa	#10
	bhs	noN	; Verifico si se apretó un numero
	ldx	#digop	
	pshx
	ldx	#mdis
	pshx
	ldaa	oper
	bne	cargon2	; Si hay operador, paso a cargar el operando 2
	
	ldaa	0,y
	bne	nocero1
	ldx	op1	; se este apretando 0 y a su vez
	beq	ceroizq	; el operando sea nulo.
nocero1	ldx	#negop1	; y despues uso cargon para el operando 1
	jmp	saltoM1	
	
cargon2	ldaa	0,y
	bne	nocero2
	ldx	op2	; Si no hay operador, verifico que no
	beq	ceroizq	;se este apretando 0 y a su vez el operando
nocero2	ldx	#negop2	;sea nulo y despues uso cargon para el operando 2

saltoM1	jsr	cargon	;en operando 1
	jmp	cierro
	
ceroizq	ldx	#mdis
	ldaa	#$30
	staa	3,x
	clr	0,x
	
cierro	pulx
	pulx
	jmp	lcarga	


noN 	ldaa	0,y
	cmpa	#$2D	
	bne	noM	; Se apretó "-"?
	
	ldx	op1	; Si todavía no hay operando 1
	beq	nega	; Salto a nega1
	ldaa	recur
	beq	norecur	; Si estoy en modo recursivo, acepto modificar el operador
	jmp	noM
	
norecur	ldaa	oper	; Si no hay operador, cargo el 
	beq	menop	; "-" como operador
	
	inc	negop2	; Si no se cumplio nada de lo anterior,
	ldaa	#$2D	;avisamos que el operando 2 es negativo
	staa	mdis	;y cargamos el "-" en el display
	inc	digop	; Decrementamos en uno los digitos disponibles
	jmp	lcarga
	
	

nega	ldaa	negop1	; Si ya fue negado el operando 1,
	bne	noM	;uso el '-' como operador aunque op1 sea 0
	inc	negop1	; Avisamos que el operando 1 es negativo
	inc	digop	; Decrementamos en uno los digitos disponibles
	ldaa	#$2D	;y cargamos el "-" en el display
	staa	mdis
	jmp	lcarga



noM	ldaa	0,y
	beq	nocarga	; Se apretó un operando?
	ldaa	recur 
	beq	sal10 ; Si no estoy en modo recursivo, analizo si tengo operador
menop	clr	negop2
	ldx	#op2
	clr	0,x	;Borro el MSB del operando 2
	clr	1,x	;Borro el LSB del operando 2
	clr	digop
	clr	recur ; Borro la recursividad
	jmp	coper

sal10	ldaa	oper 	;verifico que no haya operador cargado
	bne	lcarga 	; Si hay operador, no cargo el carácter presionado
coper	ldx	#mdis
	pshx
	ldaa	0,y
	ldx	#digop
	ldy	#oper
	jsr	cargoop	; Cargo el operador
	pulx
	jmp	lcarga
	
	
	
err	ldx	#mdis	
	pshx
	ldy	#I_STR
	ldx	#negop1
	ldab	#NCLC
	jsr	error	; Llamo a la subrutina representa el estado error
	pulx		; Compensamos el pasaje de variables por stack
	
lcarga	ldx	#mdis	
	jsr	display	; Refrezco el display
	jsr	delay	; Ejecuto delay para antirebote
nocarga	jmp	mloop 	; Vuelvo al inicio del programa

****************************************************************************************************************
	rseg	VARS
negop1	rmb	1
op1	rmb	2
oper	rmb	1
negop2	rmb	1
op2	rmb	2
mdis	rmb	4
digop	rmb	1
result	rmb	2
recur	rmb	1	; 1=recursivo  0 = no recursivo
NCLC	equ	*-negop1
****************************************************************************************************************	

****************************************************************************************************************
	rseg	STACK
stack	rmb	$50	;el programa hace uso mínimo del stack, pero se asigno un espacio extra.
st_ini	equ	*-1
****************************************************************************************************************

********************  String  ***************************
	rseg	STRING
I_STR	fcb	 0
	fcb	 1
	fcb	 2
	fcb	 3
	fcb	 4
	fcb	 5
	fcb	 6
	fcb	 7
	fcb	 8
	fcb	 9
	fcc	'+-C/*R'
	
	END
