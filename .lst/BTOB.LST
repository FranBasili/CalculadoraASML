################################################################################
#                                                                              #
#    Micro Series 6801 Assembler V2.00/DOS              05/Nov/19  01:19:07    #
#                                                                              #
#       Source   =   btob.msa                                                  #
#       List     =   btob.lst                                                  #
#       Object   =   btob.r07                                                  #
#       Options  =                                                             #
#                                                                              #
#                                               (c) Copyright IAR Systems 1990 #
################################################################################


    1  0000                   p68h11
    2  0000                   public  btasci,zcleaner
    3                 $const.def
    4                 *********************** Ports ****************************
    5  1007           DDRC    equ     $1007 ;data direction register for C
    6  1002           PIOC    equ     $1002 ;for strobe B assertion change
    7  1005           PORTCL  equ     $1005 ;port C latched
    8  1004           PORTB   equ     $1004 ;port B
    9  1003           PORTC   equ     $1003 ;rows
   10                 
   11                 *************** Cols and Row Ports ***********************
   12  1003           ROWS    equ     PORTC ;outputs
   13  1005           COLS    equ     PORTCL ;inputs
   14                 
   15                 ******************* Row Masks ****************************
   16  000E           FIL0    equ     00001110b ;mascaras para manejo de filas
   17  000D           FIL1    equ     00001101b
   18  000B           FIL2    equ     00001011b
   19  0007           FIL3    equ     00000111b
   20                 **********************************************************
   21                 *************Caracteristicas de Hardware******************
   22  0004           DIGITOS equ     4
   23  2710           MAX     equ     10000
   24  FC18           MIN     equ     -1000
   25                 **********************************************************
   26                 ****************************************************************************************************************
   27                 *               Binary to ASCII
   28                 * Transforma un numero en bcd a binario
   29                 * Parametros recibidos:  
   30                 *    Inicio del arreglo de numeros por IX  
   31                 *    Inicio de mdis por IY
   32                 * Parametros entregados: Numero en ASCII en la memoria pedida por IY
   33                 ****************************************************************************************************************
   34  0000                   rseg    CODE
   35  0000           btasci  equ     *
   36  0000 36                psha
   37  0001 37                pshb
   38  0002 3C                pshx
   39  0003 183C              pshy            ;programación defensiva
   40                         
   41  0005 EC00              ldd     0,x
   42  0007 2733              beq     cero
   43  0009 48                lsla
   44  000A 2412              bcc     posit   ;en estas cuatro primeras lineas verifico si el númmero es negativo o cero
   45  000C C62D              ldab    #$2D    ;cargo el sibolo negativo -
   46  000E 18E700            stab    0,y
   47  0011 EC00              ldd     0,x     ;cargo el numero a convertir
   48  0013 43                coma    
   49  0014 53                comb
   50  0015 C30001            addd    #1      ;complemento a dos de AccD
   51  0018 CE0003            ldx     #DIGITOS-1      ;cantidad de numeros a convertir (como es negativo es uno menos)
   52  001B 3C                pshx
   53  001C 2006              bra     cargo
   54  001E EC00      posit   ldd     0,x
   55  0020 CE0004            ldx     #DIGITOS        ;cantidad de numeros a convertir
   56  0023 3C                pshx            ;uso una variable temporal que estará en el stack
   57  0024 CE000A    cargo   ldx     #10     
   58  0027 02                idiv
   59  0028 8C0000            cpx     #0
   60  002B CB30              addb    #$30    ;corrección de número decimal a ASCII         
   61  002D 18E703            stab    3,y     ;lo cargo en mdis para luego ser mostrado en el display
   62  0030 1809      nonum   dey             ;recorro los elementos del display
   63  0032 8F                xgdx            ;intercambio para no perder lo que se seguira dividiendo
   64  0033 38                pulx    
   65  0034 09                dex             ;decremento el contador de divisiones (variable temporal)
   66  0035 3C                pshx
   67  0036 26EC              bne     cargo   ;si el contador es cero es porque cargo todos los elementos del display
   68  0038 38                pulx            ;corrección de SP
   69  0039 7E0045            jmp     fin
   70                 
   71                 
   72  003C 18ED00    cero    std     0,y     ;en las últimos tres elementos (de izquierda a derecha)no se ve nada y solo aparece 
   73  003F CC0030            ldd     #$0030  ; un cero en la el primer elemento del display.
   74  0042 18ED02            std     2,y     
   75                         
   76  0045 1838      fin     puly            ;programación defensiva
   77  0047 38                pulx
   78  0048 32                pula    
   79  0049 33                pulb
   80  004A 39                rts
   81                 *************************************************************************************************************
   82                 *************************************************************************************************************
   83                 
   84                 ****************************************************************************************************************
   85                 * ZCLEANER
   86                 * Borra todos los ceros no significativos del display
   87                 * Parametros recibidos:  
   88                 *    Memorias correspondientes al display por IX.
   89                 * Parametros entregados: Ninguno
   90                 *************************************************************************************************************
   91                 
   92  004B                   rseg    CODE
   93  004B           zcleaner        equ     *
   94  004B 36                psha
   95  004C 37                pshb
   96  004D 3C                pshx
   97                         
   98  004E C604              ldab    #DIGITOS        ; Cargo un contador con la cant de digitos a analizar
   99  0050 A600      cleaning        ldaa    0,x     ; Cargo un dígito
  100  0052 812D              cmpa    #$2D            ; Si es el signo negativo, no lo borro pero no lo 
  101  0054 2707              beq     noclean         ;cuento como un digito significativo
  102  0056 4D                tsta                    ; Si el caracter es distinto de cero: salgo de la subrutina
  103  0057 8130              cmpa    #$30            ; Si el caracter es 0, lo borro.
  104  0059 2606              bne     fclean  
  105  005B 6F00              clr     0,x
  106  005D 08        noclean inx                     ; Apunto al sgte caracter
  107  005E 5A                decb                    ; Decremento el contador de caracteres a analizar
  108  005F 26EF              bne     cleaning        ; Sigo analizando mientras queden caracteres.
  109                         
  110  0061 38        fclean  pulx
  111  0062 33                pulb
  112  0063 32                pula
  113  0064 39                rts
  114                 *************************************************************************************************************
  115                 *************************************************************************************************************
  116  0065                   END

    Errors:  None           ########
    Bytes:   101            # btob #
    CRC:     C48F           ########

